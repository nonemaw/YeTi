
#############
### Input ###
#############
single_input ::=  NEWLINE | simple_stmt | compound_stmt NEWLINE
file_input   ::=  (NEWLINE | stmt)* NEWLINE*
eval_input   ::=  testlist NEWLINE* NEWLINE
xplan        ::=  (NEWLINE | stmt | TEXT)* NEWLINE*


#################
### Decorator ###
#################
decorator  ::=  '@' NAME [ '(' [arglist] ')' ] NEWLINE
decorators ::=  decorator+
decorated  ::=  decorators (classdef | funcdef | async_funcdef)


##############
### Import ###
##############
import_name     ::=  'import' dotted_as_names
import_from     ::=  ('from' (('.' | '...')* NAME | ('.' | '...')+) 'import' ('*' | '(' import_as_names ')' | import_as_names))
import_as_name  ::=  NAME ['as' NAME]
dotted_as_name  ::=  NAME ['as' NAME]
import_as_names ::=  import_as_name (',' import_as_name)* [',']
dotted_as_names ::=  dotted_as_name (',' dotted_as_name)*


##################
### Definition ###
##################
async_funcdef  ::=  'async' funcdef
funcdef        ::=  'def' NAME parameters ['->' test] ':' suite 'end'
classdef       ::=  'class' NAME ['(' [arglist] ')'] ':' suite 'end'
tfpdef         ::=  NAME [':' test]
vfpdef         ::=  NAME
lambdef        ::=  'lambda' [varargslist] ':' test
lambdef_nocond ::=  'lambda' [varargslist] ':' test_nocond


#################
### Statement ###
#################
stmt          ::=  compound_stmt | simple_stmt
simple_stmt   ::=  small_stmt (';' small_stmt)* [';']
small_stmt    ::=  (expr_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | nonlocal_stmt | assert_stmt)
expr_stmt     ::=  testlist_star_expr (annassign | augassign testlist | ('=' testlist_star_expr)*)
del_stmt      ::=  'del' exprlist
pass_stmt     ::=  'pass'
flow_stmt     ::=  break_stmt | continue_stmt | return_stmt | raise_stmt
break_stmt    ::=  'break'
continue_stmt ::=  'continue'
return_stmt   ::=  'return' [testlist]
raise_stmt    ::=  'raise' [test ['from' test]]
import_stmt   ::=  import_name | import_from
global_stmt   ::=  'global' NAME (',' NAME)*
nonlocal_stmt ::=  'nonlocal' NAME (',' NAME)*
assert_stmt   ::=  'assert' test [',' test]

compound_stmt ::=  if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt
# if_stmt       ::=  'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
# while_stmt    ::=  'while' test ':' suite ['else' ':' suite]
# for_stmt      ::=  'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
# TODO: find wired bugs
if_stmt       ::=  NEWLINE* 'if' test ':' suite (NEWLINE* 'elif' test ':' suite)* [NEWLINE* 'else' ':' suite] NEWLINE* 'end'
while_stmt    ::=  NEWLINE* 'while' test ':' suite [NEWLINE* 'else' ':' suite] NEWLINE* 'end'
for_stmt      ::=  NEWLINE* 'for' exprlist 'in' testlist ':' suite [NEWLINE* 'else' ':' suite] NEWLINE* 'end'
try_stmt      ::=  NEWLINE* ('try' ':' suite ((except_clause ':' suite)+ [NEWLINE* 'else' ':' suite] [NEWLINE* 'finally' ':' suite] | NEWLINE* 'finally' ':' suite)) NEWLINE* 'end'
except_clause ::=  NEWLINE* 'except' [test ['as' NAME]]
with_stmt     ::=  NEWLINE* 'with' with_item (',' with_item)*  ':' suite NEWLINE* 'end'
with_item     ::=  test ['as' expr]
async_stmt    ::=  'async' (funcdef | with_stmt | for_stmt)

annassign     ::=  ':' test ['=' test]
testlist_star_expr ::= (star_expr | test) (',' (star_expr | test))* [',']
augassign     ::=  ('+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '**=' | '//=')

# suite         ::=  NEWLINE INDENT stmt+ DEDENT | simple_stmt
suite         ::=  NEWLINE (NEWLINE* (TEXT | stmt))+ | (TEXT | simple_stmt)
test          ::=  lambdef | or_test ['if' or_test 'else' test]
test_nocond   ::=  or_test | lambdef_nocond
or_test       ::=  and_test ('or' and_test)*
and_test      ::=  not_test ('and' not_test)*
not_test      ::=  'not' not_test | comparison


##################
### Expression ###
##################
comparison     ::=  expr (comp_op expr)*
comp_op        ::=  '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'
expr           ::=  xor_expr ('|' xor_expr)*
xor_expr       ::=  and_expr ('^' and_expr)*
and_expr       ::=  shift_expr ('&' shift_expr)*
shift_expr     ::=  arith_expr (('<<'|'>>') arith_expr)*
arith_expr     ::=  term (('+'|'-') term)*
term           ::=  factor (('*'|'@'|'/'|'%'|'//') factor)*
factor         ::=  ('+'|'-'|'~') factor | power
power          ::=  atom_expr ['**' factor]
atom_expr      ::=  ['await'] atom trailer*
atom           ::=  ('(' [testlist_comp] ')' | '[' [testlist_comp] ']' | '{' [dictorsetmaker] '}' | NAME | NUMBER | STRING+ | '...' | 'None' | 'True' | 'False')
testlist_comp  ::=  (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )
trailer        ::=  '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
subscriptlist  ::=  subscript (',' subscript)* [',']
subscript      ::=  [test] ':' [test] [sliceop] | test
sliceop        ::=  ':' [test]
exprlist       ::=  (expr|star_expr) (',' (expr|star_expr))* [',']
testlist       ::=  test (',' test)* [',']
dictorsetmaker ::=  ( ((test ':' test | '**' expr) (comp_for | (',' (test ':' test | '**' expr))* [','])) | ((test | star_expr) (comp_for | (',' (test | star_expr))* [','])) )
star_expr      ::=  '*' expr

comp_iter      ::=  comp_for | comp_if
sync_comp_for  ::=  'for' exprlist 'in' or_test [comp_iter]
comp_for       ::=  ['async'] sync_comp_for
comp_if        ::=  'if' test_nocond [comp_iter]


################
### Argument ###
################
parameters    ::=  '(' [typedargslist] ')'
typedargslist ::=  (tfpdef ['=' test] (',' tfpdef ['=' test])* [',' ['*' [tfpdef] (',' tfpdef ['=' test])* [',' ['**' tfpdef [',']]] | '**' tfpdef [',']]] | '*' [tfpdef] (',' tfpdef ['=' test])* [',' ['**' tfpdef [',']]] | '**' tfpdef [','])
varargslist   ::=  (vfpdef ['=' test] (',' vfpdef ['=' test])* [',' ['*' [vfpdef] (',' vfpdef ['=' test])* [',' ['**' vfpdef [',']]] | '**' vfpdef [',']]] | '*' [vfpdef] (',' vfpdef ['=' test])* [',' ['**' vfpdef [',']]] | '**' vfpdef [','])
arglist       ::=  argument (',' argument)*  [',']
argument      ::=  ( '**' test | '*' test | test '=' test | test [comp_for] )


##############
### Others ###
##############
NAME     ::=  '[\$]?[a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*'
NUMBER   ::=  '[+-]?([0-9]*[.])?[0-9]+'
STRING   ::=  '(\'[\w\W]*?\'|"[\w\W]*?")'
NEWLINE  ::=  '\n'
DEDENT   ::=  '<<<'
INDENT   ::=  '>>>'
TEXT     ::=  '<TEXT>'
